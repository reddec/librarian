package librarian

import (
	"context"
	"io/ioutil"
	"os"
	"path/filepath"

	"github.com/google/uuid"
)

// Directory based storage, where ID is generated by UUIDv4 algorithm.
func Directory(dir string) Storage {
	return &filesBackend{directory: dir}
}

type filesBackend struct {
	directory string
}

func (fb *filesBackend) Get(ctx context.Context, id string) ([]byte, error) {
	if _, err := uuid.Parse(id); err != nil {
		return nil, err
	}
	return ioutil.ReadFile(filepath.Join(fb.directory, id))
}

func (fb *filesBackend) Iterate(ctx context.Context, iterator func(id string, data []byte) error) error {
	list, err := ioutil.ReadDir(fb.directory)
	if err != nil {
		return err
	}
	for _, item := range list {
		if ctx.Err() != nil {
			return ctx.Err()
		}
		if item.IsDir() {
			continue
		}
		if _, err := uuid.Parse(item.Name()); err != nil {
			continue
		}
		data, err := ioutil.ReadFile(filepath.Join(fb.directory, item.Name()))
		if err != nil {
			return err
		}
		err = iterator(item.Name(), data)
		if err != nil {
			return err
		}
	}
	return nil
}

func (fb *filesBackend) Delete(ctx context.Context, id string) error {
	if _, err := uuid.Parse(id); err != nil {
		return nil
	}
	return os.Remove(filepath.Join(fb.directory, id))
}

func (fb *filesBackend) Update(ctx context.Context, id string, data []byte) error {
	if _, err := uuid.Parse(id); err != nil {
		return nil
	}
	return ioutil.WriteFile(filepath.Join(fb.directory, id), data, 0600)
}

func (fb *filesBackend) Create(ctx context.Context, data []byte) (string, error) {
	id := uuid.New().String()
	return id, ioutil.WriteFile(filepath.Join(fb.directory, id), data, 0600)
}
